#version: '3'

  # djangoTemplate:
  #   container_name: djangotemplate
  #   user: root
  #   volumes:
  #     - djangotemplate:/var/lib/postgresql/
  #   networks:
  #   - microservices
  #   build: backend/djangotemplate
  #   image: djangotemplate
  #   expose :
  #   - "8080"
  #   restart: on-failure

networks:
  microservices:
    external: true

volumes:
  secret_volume:
  user:
  frontend:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './services/nginx/frontend/'
  pongapp:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: './services/backend/game3d/tools/game3d/'
  matchmaking:
  chat:
  game3d:
  pokemap:
  prometheus-data:
  grafana-data:


services:
  nginx:
    container_name: nginx
    networks:
    - microservices
    # volumes:
    #   - frontend:/usr/share/nginx/html/
    build: services/nginx
    image: nginx
    ports:
      - "4430:4430"
    restart: on-failure

  user:
    container_name: user
    user: root
    volumes:
      - user:/var/lib/postgresql/
    networks:
    - microservices
    build: services/backend/user
    image: user
    expose :
    - "4430"
    restart: on-failure

  token:
    container_name: jwtoken
    networks:
      - microservices
    build: services/backend/JWToken
    image: jwtoken
    expose :
      - "4430"
    restart: on-failure

  game3d:
    container_name: game3d
    user: root
    volumes:
    - game3d:/var/lib/postgresql
    # - pongapp:/app
    networks:
      - microservices
    build: services/backend/game3d
    image: game3d
    expose :
      - "4430"
    restart: on-failure

  matchmaking:
    container_name: matchmaking
    user: root
    volumes:
      - matchmaking:/var/lib/postgresql/
    networks:
    - microservices
    build: services/backend/matchmaking
    image: matchmaking
    expose :
    - "4430"
    restart: on-failure

  pokemap:
    container_name: pokemap
    networks:
      - microservices
    build: services/backend/pokemap
    image: pokemap
    expose :
      - "4430"
    restart: on-failure

  chat:
    container_name: chat
    user: root
    volumes:
      - chat:/var/lib/postgresql/
    networks:
    - microservices
    build: services/backend/chat
    image: chat
    expose :
    - "4430"
    restart: on-failure


#************************************************************************** //
#   MONITORING
#************************************************************************** //

  prometheus:
    image: prom/prometheus:v2.11.1
    container_name: prometheus
    build:
      context: ./services/backend/monitoringPrometheus/
      dockerfile: Dockerfile
    # deploy: # facultatif d'apres chat gpt si on utilise pas docker
    #   replicas: 1
    volumes:
      # Permet de stocker les donnees de prometheus sur le system host
      # - source:destination / pour eviter d'utiliser un dockerfile
      - prometheus-data:/prometheus
      # - ./backend/monitoring/Prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./alertmanager/alert.rules/alerts.rules.yml:/alertmanager/alert.rules/alerts.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
    ports:
      - "9090:9090"
    # En utilisant network_mode: "host", le conteneur Docker utilise directement le réseau
    # de l'hôte sur lequel il s'exécute, sans isolation réseau.
    # network_mode: "host"
    # networks:
    #   - microservices

  grafana:
    image: grafana/grafana:10.4.0
    container_name: grafana
    # build:
    #   context: ./backend/monitoringGrafana/
    #   dockerfile: Dockerfile
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    user: root
    deploy:
      replicas: 1
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana/dashboards
      - ./services/backend/monitoringGrafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml:rw
      - ./services/backend/monitoringGrafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./services/backend/monitoringGrafana/grafana.ini:/etc/grafana/grafana.ini
      - ./services/backend/monitoringGrafana/dashboards:/var/lib/grafana/dashboards
    #network_mode: "host"

  blackbox:
    image: prom/blackbox-exporter:v0.14.0
    container_name: blackbox_exporter
    # deploy:
    #   replicas: 1
    volumes:
    - ./services/blackbox:/config
    network_mode: "host"

  node_exporter:
  # (node exporter est un collecteur de metriques system)
    image: prom/node-exporter:v0.18.1
    container_name: node_exporter
    # deploy:
    #   replicas: 1
    network_mode: "host"
