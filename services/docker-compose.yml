version: '3'

networks:
  microservices:
    driver: bridge

services:
  nginx:
    container_name: nginx
    networks: 
    - microservices
    build: nginx
    image: nginx
    ports: 
      - "8080:80"
    restart: on-failure

  user:
    container_name: user
    networks: 
    - microservices
    build: backend/user
    image: user
    expose :
    - "5433"
    restart: on-failure

  game:
    container_name: game
    networks: 
    - microservices
    build: backend/game
    image: game
    expose :
    - "5432"
    restart: on-failure

  chat:
    container_name: chat
    networks: 
    - microservices
    build: backend/chat
    image: chat
    expose :
    - "5434"
    restart: on-failure

#************************************************************************** //
#   MONITORING
#************************************************************************** //

  prometheus:
    image: prom/prometheus:v2.11.1
    container_name: prometheus
    # deploy: # facultatif d'apres chat gpt si on utilise pas docker
    #   replicas: 1
    volumes:
      # Permet de stocker les donnees de prometheus sur le system host
      # - source:destination / pour eviter d'utiliser un dockerfile
      - prometheus-data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      # - ./alertmanager/alert.rules/alerts.rules.yml:/alertmanager/alert.rules/alerts.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=365d'
    # En utilisant network_mode: "host", le conteneur Docker utilise directement le réseau
    # de l'hôte sur lequel il s'exécute, sans isolation réseau.
    network_mode: "host"

  grafana:
    image: grafana/grafana:6.2.5
    container_name: grafana
    environment:
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
    # deploy:       # specifie une fonction de deploiement
    #   replicas: 1 # nombre de replique du service
    depends_on:
      - prometheus
    volumes:
      # - source:destination / pour eviter d'utiliser un dockerfile
      - grafana-data:/var/lib/grafana
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    network_mode: "host"

  blackbox:
    image: prom/blackbox-exporter:v0.14.0
    container_name: blackbox_exporter
    # deploy:
    #   replicas: 1
    volumes:
    - ./blackbox:/config
    network_mode: "host"

  node_exporter:
    image: prom/node-exporter:v0.18.1
    container_name: node_exporter
    # deploy:
    #   replicas: 1
    network_mode: "host"

volumes:
  prometheus-data:
  grafana-data:
